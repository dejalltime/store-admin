version: "3.7"
services:
  mongodb:
    image: mongo:6.0.6
    container_name: 'mongo'
    restart: always
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  order-service:
    image: dejmartins/order-service:latest
    container_name: 'order-service'
    restart: always
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://order-service:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_URI=${ORDER_QUEUE_URI}
      - ORDER_QUEUE_HOSTNAME=${ORDER_QUEUE_HOSTNAME}
      - ORDER_QUEUE_USERNAME=${ORDER_QUEUE_USERNAME}
      - ORDER_QUEUE_PASSWORD=${ORDER_QUEUE_PASSWORD}
      - ORDER_QUEUE_NAME=${ORDER_QUEUE_NAME}
      - USE_WORKLOAD_IDENTITY_AUTH=${USE_WORKLOAD_IDENTITY_AUTH}
      - ORDER_DB_URI=${ORDER_DB_URI}
      - ORDER_DB_NAME=${ORDER_DB_NAME}
      - ORDER_DB_COLLECTION_NAME=${ORDER_DB_COLLECTION_NAME}
      - ORDER_QUEUE_PORT=${ORDER_QUEUE_PORT}
      - ORDER_QUEUE_TRANSPORT=${ORDER_QUEUE_TRANSPORT}
    networks:
      - backend_services
  makeline-service:
    image: dejmartins/makeline-service:latest
    container_name: 'makeline-service'
    restart: always
    ports:
      - 3001:3001
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://makeline-service:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_URI=${ORDER_QUEUE_URI}
      - ORDER_QUEUE_HOSTNAME=${ORDER_QUEUE_HOSTNAME}
      - ORDER_QUEUE_USERNAME=${ORDER_QUEUE_USERNAME}
      - ORDER_QUEUE_PASSWORD=${ORDER_QUEUE_PASSWORD}
      - ORDER_QUEUE_NAME=${ORDER_QUEUE_NAME}
      - USE_WORKLOAD_IDENTITY_AUTH=${USE_WORKLOAD_IDENTITY_AUTH}
      - ORDER_DB_URI=${ORDER_DB_URI}
      - ORDER_DB_NAME=${ORDER_DB_NAME}
      - ORDER_DB_COLLECTION_NAME=${ORDER_DB_COLLECTION_NAME}
      - ORDER_QUEUE_PORT=${ORDER_QUEUE_PORT}
      - ORDER_QUEUE_TRANSPORT=${ORDER_QUEUE_TRANSPORT}
    networks:
      - backend_services
    depends_on:
      mongodb:
        condition: service_healthy
  product-service:
    image: dejmartins/product-service:latest
    container_name: 'product-service'
    restart: always
    ports:
      - 3002:3002
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://product-service:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  # virtual-customer:
  #   image: ramymohamed/virtual-customer-l8:latest
  #   container_name: 'virtual-customer'
  #   restart: always
  #   environment:
  #     - ORDER_SERVICE_URL=http://order-service:3000/
  #     - ORDERS_PER_HOUR=3600
  #   networks:
  #     - backend_services
  #   depends_on:
  #     order-service:
  #       condition: service_healthy
  # ai-service:
  #   build: ../ai-service
  #   container_name: 'ai-service'
  #   restart: always
  #   ports:
  #     - 5001:5001
  #   healthcheck:
  #     test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://ai-service:5001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   environment:
  #     - USE_AZURE_OPENAI=True # set to False if you are not using Azure OpenAI
  #     - AZURE_OPENAI_DEPLOYMENT_NAME= # required if using Azure OpenAI
  #     - AZURE_OPENAI_ENDPOINT= # required if using Azure OpenAI
  #     - AZURE_OPENAI_DALLE_ENDPOINT= # required if using Azure OpenAI's DALL-E model
  #     - AZURE_OPENAI_DALLE_DEPLOYMENT_NAME= # required if using Azure OpenAI's DALL-E model
  #     - OPENAI_API_KEY= # always required if using OpenAI if using Azure OpenAI, consider use Workload Identity https://learn.microsoft.com/azure/aks/open-ai-secure-access-quickstart
  #     - OPENAI_ORG_ID= # required if using OpenAI
  #   networks:
  #     - backend_services
networks:
  backend_services:
    driver: bridge